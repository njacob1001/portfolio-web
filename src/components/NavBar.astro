---
const items = [
  {
    title: 'Work',
    description: "I'm a software engineer at a startup in San Francisco.",
    link: '#work',
  },
  {
    title: 'Skills',
    description: "I'm a software engineer at a startup in San Francisco.",
    link: '#skills',
  },
  {
    title: 'Tools',
    link: '#tools',
  },
  {
    title: 'Blog',
    link: '#blog',
  },
  {
    title: 'Projects',
    link: '/projects',
  },
]
---

<nav-bar>
  <nav>
    <ul>
      {
        items.map(({ title, link }) => (
          <>
            <li>
              <a href={link}>{title}</a>
            </li>
          </>
        ))
      }
    </ul>
  </nav>
</nav-bar>

<style>
  nav {
    backdrop-filter: blur(12px) saturate(150%);
    background-clip: padding-box;
    background-color: hsl(var(--gray-0-hsl) / 80%);
    display: flex;
    flex-direction: row;
    justify-content: center;
    position: fixed;
    top: 0;
    transform: translateY(-100%);
    transition: all 0.3s ease-out;
    width: 100vw;
    z-index: var(--layer-2);
  }

  ul {
    align-items: center;
    display: flex;
    flex-direction: row;
  }

  li {
    display: flex;
    align-items: center;
  }

  li:not(:last-child)::after {
    content: ' ';
    display: flex;
    height: 16px;
    width: 1px;
    background-color: var(--gray-11);
    margin-inline: 2rem;
  }

  a {
    float: left;
    display: block;
    padding-block: var(--size-4);
    padding-inline: var(--size-4);
    font-weight: var(--font-weight-5);
    color: var(--gray-11);
  }

  .navbar--visible {
    transform: translateY(0%);
  }

  @media screen and (max-width: 650px) {
    nav {
      visibility: hidden;
    }
  }
</style>

<script>
  class MyComponent extends HTMLElement {
    static visible_class = 'navbar--visible'
    lastScrollTop: number
    rafId: number | null = null
    allowScrollListener: boolean

    constructor() {
      super()
      this.lastScrollTop = 0
      this.allowScrollListener = window.innerWidth > 650
      this.handleScroll = this.handleScroll.bind(this)
    }

    connectedCallback() {
      if (this.allowScrollListener) {
        window.addEventListener('scroll', this.handleScroll)
        this.handleScroll()
      }
    }

    disconnectedCallback() {
      if (this.allowScrollListener) {
        window.removeEventListener('scroll', this.handleScroll)
        cancelAnimationFrame(this.rafId!)
      }
    }

    handleScroll() {
      this.rafId = requestAnimationFrame(() => {
        const currentScroll = window.pageYOffset

        if (currentScroll <= 0) {
          this.children[0].classList.add(MyComponent.visible_class)
          return
        }

        if (currentScroll > this.lastScrollTop) {
          this.children[0].classList.remove(MyComponent.visible_class)
        } else {
          this.children[0].classList.add(MyComponent.visible_class)
        }
        this.lastScrollTop = currentScroll
      })
    }
  }

  customElements.define('nav-bar', MyComponent)
</script>
