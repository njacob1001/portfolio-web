---
const items = [
  {
    title: 'SoftServe',
    description:
      'lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl. lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl.',
  },
  {
    title: 'Algoritmo',
    description:
      'lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl.',
  },
  {
    title: 'Rumm',
    description:
      'lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl.',
  },
  {
    title: 'Meraki',
    description:
      'lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl.',
  },
  {
    title: 'InnGroup',
    description:
      'lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl. Sed tincidunt, nisl eget aliquam tincidunt, nisl elit aliquam tortor, vel lacinia nisl lorem eget nisl.',
  },
]
const shader = `
// Author @patriciogv - 2015
// http://patriciogonzalezvivo.com

#ifdef GL_ES
precision mediump float;
#endif

uniform vec2 u_resolution;
uniform vec2 u_mouse;
uniform float u_time;

float random (in vec2 _st) {
    return fract(sin(dot(_st.xy,
                         vec2(12.9898,78.233)))*
        43758.5453123);
}

// Based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise (in vec2 _st) {
    vec2 i = floor(_st);
    vec2 f = fract(_st);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

#define NUM_OCTAVES 5

float fbm ( in vec2 _st) {
    float v = 0.0;
    float a = 0.5;
    vec2 shift = vec2(100.0);
    // Rotate to reduce axial bias
    mat2 rot = mat2(cos(0.5), sin(0.5),
                    -sin(0.5), cos(0.50));
    for (int i = 0; i < NUM_OCTAVES; ++i) {
        v += a * noise(_st);
        _st = rot * _st * 2.0 + shift;
        a *= 0.5;
    }
    return v;
}


void main() {
    vec2 st = gl_FragCoord.xy/u_resolution.xy*3.;
    // st += st * abs(sin(u_time*0.1)*3.0);
    vec3 color = vec3(0.0);

    vec2 q = vec2(0.);
    q.x = fbm( st + 0.00*u_time);
    q.y = fbm( st + vec2(1.0));

    vec2 r = vec2(0.);
    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15*u_time );
    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.126*u_time);

    float f = fbm(st+r);

    color = mix(vec3(0.560784, 0.105882, 0.105882),
            vec3(0.560784, 0.105882, 0.105882),
            clamp((f)*4.0, 0.0, 1.0));

    color = mix(color,
                vec3(0.152941, 0.47843, 0.152941),
                clamp(length(q),0.0,1.0));

    color = mix(color,
                vec3(0.141176, 0.145098, 0.431373),
                clamp(length(r.x),0.0,1.0));

    gl_FragColor = vec4((f*f*f+.6*f*f+.5*f)*color,1.);
}
`
---

<cards-component>
  <section>
    <h2>Work Experience</h2>
    {
      items.map(({ title, description }, index) => (
        <article>
          {index === 0 && <canvas class="glslCanvas" data-fragment={shader} />}
          <h3>{title}</h3>
          <p>{description}</p>
        </article>
      ))
    }
  </section>
</cards-component>

<style>
  section {
    min-height: 100vh;
    width: 100%;
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto;
    background-color: var(--gray-0);
    max-width: var(--size-lg);
    margin-inline: auto;
    padding: var(--size-10) var(--size-4);
    gap: var(--size-4);
    margin-block-end: var(--size-11);
  }

  h2 {
    grid-column: 1 / 3;
    align-self: flex-start;
    font-size: var(--fluid-font-size-9);
    text-transform: uppercase;
    color: var(--gray-12);
    font-weight: var(--font-weight-9);
    margin-block-end: var(--size-5);
  }

  h3 {
    font-weight: var(--font-weight-6);
    margin-block-end: var(--size-4);
    color: var(--gray-12);
  }

  p {
    color: var(--gray-12);
  }
  article {
    position: relative;
    background-color: transparent;
    padding: var(--size-7);
  }

  article:nth-child(2) {
    grid-column: 1 / 3;
    background-color: transparent;
    z-index: 2;
  }

  article:nth-child(2) > h3,
  article:nth-child(2) > p {
    position: relative;
    z-index: var(--layer-1);
    color: var(--gray-0);
    max-inline-size: none;
  }

  article:not(:nth-child(2)) {
    border: 1px var(--gray-12) solid;
  }

  :global(canvas) {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  @media screen and (max-width: 768px) {
    section {
      grid-template-columns: 1fr;
      grid-template-rows: auto;
      margin-block-end: var(--size-4);
    }

    article {
      grid-column: 1 / 2 !important;
    }
  }
</style>
