---
const skills = [
  {
    id: 'front-end',
    label: 'Front end',
    text: "I specialize in React.js and advanced web/UI development concepts. My expertise includes design patterns, clean code, APIs, GraphQL, Redux, Recoil, and React-Router. I've also developed vanilla JS projects and explored new tools like Astro and Solid. I have mobile development experience with Jetpack Compose and a strong understanding of CSS system designs, patterns, and methodologies.",
  },
  {
    id: 'backend-end',
    label: 'Back end',
    text: 'I specialize in backend development with expertise in programming languages such as JavaScript, Kotlin, Golang, and Rust. I have a strong understanding of clean architecture, TDD, and DDD principles. I am proficient in building REST APIs, working with databases like Postgres and MongoDB, and deploying applications on AWS and Kubernetes. Additionally, I have experience with web sockets, Swagger documentation, unit testing, and design patterns.',
  },
  {
    id: 'devops',
    label: 'DevOps',
    text: 'As a skilled DevOps professional, I have extensive experience in leveraging various tools and technologies to optimize software development processes. I have a proven track record of utilizing CI/CD with GitHub Actions, Terraform, Kubernetes, and Docker containers to streamline software delivery pipelines. In addition, I possess expertise in automating tests, enabling continuous delivery to AWS ECR ECS, and managing logging with Splunk and Data Dog. My proficiency in these areas ensures that software development and deployment occur seamlessly and efficiently, ultimately leading to improved business outcomes.',
  },
  {
    id: 'machine-learning',
    label: 'Machine Learning',
    text: 'As a beginner in machine learning, I have experience working with artificial neural networks, Python utilizing TensorFlow and OpenCV, and have explored deep learning concepts such as Cycle-GANs. While I am still developing my skills, my passion and dedication make me a valuable addition to any team focused on advancing in the field of machine learning.',
  },
  {
    id: 'teamwork',
    label: 'Teamwork',
    text: 'As a skilled team member, I have experience working with popular project management methodologies such as Scrum, Lean, and Kanban. My ability to effectively communicate with cross-functional teams and employ story points techniques has contributed to successful project outcomes. Furthermore, my proficiency in multi-cultural communication has enabled me to work with diverse teams seamlessly, fostering a collaborative and inclusive work environment.',
  },
]
---

<tabs-component>
  <section id="skills">
    <div class="constrain-with">
      <h2>Skills</h2>
      <div class="surface">
        {
          skills.map(({ label, text, id }) => (
            <details id={id}>
              <summary>{label}</summary>
              <div class="content">
                <p>{text}</p>
              </div>
            </details>
          ))
        }
        <div class="float"></div>
      </div>
    </div>
  </section>
</tabs-component>

<script>
  class TabsComponent extends HTMLElement {
    floating: HTMLDivElement | null = null

    constructor() {
      super()
    }

    connectedCallback() {
      this.floating = document.querySelector('.float')

      const firstItem = document.getElementsByTagName('details').item(0)
      firstItem?.setAttribute('open', 'true')

      document.querySelectorAll('details').forEach((currentItem, _, arr) => {
        currentItem.addEventListener('click', (e: any) => {
          e.preventDefault()
          this.calculateVisibility(currentItem, arr)
        })
      })
    }

    disconnectedCallback() {
      this.shadowRoot?.querySelectorAll('details').forEach((currentItem) => {
        currentItem.removeEventListener('click', () => {})
      })
    }

    calculateVisibility(
      clicked: HTMLDetailsElement,
      nodes: NodeListOf<HTMLDetailsElement>
    ) {
      nodes.forEach((item) => {
        if (item.id !== clicked.id) {
          item.removeAttribute('open')
        } else {
          item.setAttribute('open', 'true')
        }
      })
      this.updateFloatingPosition(clicked)
    }

    updateFloatingPosition(reference: HTMLDetailsElement) {
      // get the number from nth-childe and use it to calculate the position
      const index = Array.from(reference?.parentNode?.children || []).indexOf(
        reference
      )

      if (index === -1) return

      const { top, left, width } = reference.getClientRects()[0]
      console.log(reference.getClientRects())
      if (!this.floating) return
      // calc(var(--float-level, 0) * 4rem + var(--size-7))
      this.floating.style.setProperty('--float-level', `${index}`)
    }
  }

  customElements.define('tabs-component', TabsComponent)
</script>

<style>
  section {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background-color: #cbd5e1;
    background-image: linear-gradient(
      to bottom left,
      #5800ff 0%,
      #0096ff 50%,
      #00d7ff 100%
    );
  }

  .constrain-with {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    width: 100%;
    max-width: var(--size-lg);
    margin-block-start: var(--size-10);
  }

  h2 {
    align-self: flex-start;
    font-size: var(--fluid-font-size-9);
    font-weight: var(--font-weight-9);
    text-transform: uppercase;
    margin-inline: var(--size-7);
    color: var(--gray-0);
  }

  .surface {
    position: relative;
    background-color: var(--gray-0);
    display: flex;
    flex-direction: column;
    margin-inline: var(--size-7);
    align-self: stretch;
    justify-content: space-between;
    padding-block: var(--size-7);
    gap: 2rem;
    margin-block: var(--size-7);
  }

  .surface::after {
    content: '';
    position: absolute;
    inset-inline-start: 30%;
    background-color: #000;
    width: 1px;
    height: 50%;
    top: 50%;
    transform: translateY(-50%);
  }

  details {
    width: 30%;
    height: 4rem;
    z-index: var(--layer-1);
  }

  summary {
    height: 100%;
    display: flex;
    align-items: center;
    padding-inline-start: var(--size-7);
    mix-blend-mode: difference;
    color: var(--gray-12);
    transition: color 0.3s ease-out;
    font-size: var(--font-size-4);
  }

  details[open] summary {
    color: var(--gray-0);
  }

  .content {
    position: absolute;
    inset: 0 0 0 auto;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 70%;
  }

  p {
    max-width: var(--size-sm);
    color: var(--gray-12);
    padding-inline: var(--size-4);
  }

  .float {
    position: absolute;
    width: 100px;
    height: 100px;
    background-color: var(--gray-12);
    top: calc(
      var(--float-level, 0) * 4rem + var(--size-7) +
        calc(var(--float-level, 0) * 2rem) - 1rem
    );
    box-shadow: 6px 6px 30px 4px rgba(0, 0, 0, 0.25);
    left: calc(var(--size-4) * -1);
    width: 30%;
    height: 5rem;
    transition: top 0.3s ease-out;
  }

  @media screen and (max-width: 768px) {
    .surface {
      padding-block: 0px;
      gap: 0px;
    }
    .surface::after {
      display: none;
    }

    .content {
      position: initial;
      width: 100%;
      inset: auto;
    }

    .float {
      display: none;
    }

    summary {
      transition: none;
      height: 5rem;
      border: 1px solid var(--gray-12);
      box-sizing: content-box;
      margin-top: -1px;
    }

    details {
      width: 100%;
      height: auto;
    }

    details[open] summary {
      color: var(--gray-0);
      background-color: var(--gray-12);
    }
    p {
      padding: 1rem 2rem 3rem 2rem;
      max-width: initial;
    }
  }
</style>
