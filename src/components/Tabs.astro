---
const skills = [
  {
    id: 'front-end',
    label: 'Front end',
    text: "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English",
  },
  {
    id: 'backend-end',
    label: 'Back end',
    text: ".It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English",
  },
  {
    id: 'devops',
    label: 'DevOps',
    text: "saIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English",
  },
  {
    id: 'machine-learning',
    label: 'Machine Learning',
    text: "21It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English",
  },
  {
    id: 'teamwork',
    label: 'Teamwork',
    text: "0000000It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English",
  },
]
---

<tabs-component>
  <section>
    <div class="constrain-with">
      <h2>Skills</h2>
      <div class="surface">
        {
          skills.map(({ label, text, id }) => (
            <details id={id}>
              <summary>{label}</summary>
              <div class="content">
                <p>{text}</p>
              </div>
            </details>
          ))
        }
        <div class="float"></div>
      </div>
    </div>
  </section>
</tabs-component>

<script>
  class TabsComponent extends HTMLElement {
    floating: HTMLDivElement | null = null

    constructor() {
      super()
    }

    connectedCallback() {
      this.floating = document.querySelector('.float')

      const firstItem = document.getElementsByTagName('details').item(0)
      firstItem?.setAttribute('open', 'true')

      document.querySelectorAll('details').forEach((currentItem, _, arr) => {
        currentItem.addEventListener('click', (e: any) => {
          e.preventDefault()
          this.calculateVisibility(currentItem, arr)
        })
      })
    }

    disconnectedCallback() {
      this.shadowRoot?.querySelectorAll('details').forEach((currentItem) => {
        currentItem.removeEventListener('click', () => {})
      })
    }

    calculateVisibility(
      clicked: HTMLDetailsElement,
      nodes: NodeListOf<HTMLDetailsElement>
    ) {
      nodes.forEach((item) => {
        if (item.id !== clicked.id) {
          item.removeAttribute('open')
        } else {
          item.setAttribute('open', 'true')
        }
      })
      this.updateFloatingPosition(clicked)
    }

    updateFloatingPosition(reference: HTMLDetailsElement) {
      // get the number from nth-childe and use it to calculate the position
      const index = Array.from(reference?.parentNode?.children || []).indexOf(
        reference
      )

      if (index === -1) return

      const { top, left, width } = reference.getClientRects()[0]
      console.log(reference.getClientRects())
      if (!this.floating) return
      // calc(var(--float-level, 0) * 4rem + var(--size-7))
      this.floating.style.setProperty('--float-level', `${index}`)
    }
  }

  customElements.define('tabs-component', TabsComponent)
</script>

<style>
  section {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    background-color: #cbd5e1;
    background-image: linear-gradient(to bottom right, #0284c7, #16a34a);
  }

  .constrain-with {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    width: 100%;
    max-width: var(--size-lg);
    margin-block-start: var(--size-8);
  }

  h2 {
    align-self: flex-start;
    font-size: var(--font-size-9);
    font-weight: var(--font-weight-9);
    text-transform: uppercase;
    margin: var(--size-8) var(--size-7);
    color: var(--gray-0);
  }

  .surface {
    position: relative;
    background-color: var(--gray-0);
    display: flex;
    flex-direction: column;
    margin-inline: var(--size-7);
    align-self: stretch;
    justify-content: space-between;
    padding-block: var(--size-7);
    gap: 2rem;
  }

  .surface::after {
    content: '';
    position: absolute;
    inset-inline-start: 30%;
    background-color: #000;
    width: 1px;
    height: 50%;
    top: 50%;
    transform: translateY(-50%);
  }

  details {
    width: 30%;
    height: 4rem;
    z-index: var(--layer-4);
  }

  summary {
    height: 100%;
    display: flex;
    align-items: center;
    padding-inline-start: var(--size-7);
    mix-blend-mode: difference;
    color: var(--gray-12);
    transition: color 0.3s ease-out;
    font-size: var(--font-size-4);
  }

  details[open] summary {
    color: var(--gray-0);
  }

  .content {
    position: absolute;
    inset: 0 0 0 auto;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 70%;
  }

  p {
    max-width: var(--size-sm);
    color: var(--gray-12);
  }

  .float {
    position: absolute;
    width: 100px;
    height: 100px;
    background-color: var(--gray-12);
    top: calc(
      var(--float-level, 0) * 4rem + var(--size-7) +
        calc(var(--float-level, 0) * 2rem) - 1rem
    );
    box-shadow: 6px 6px 30px 4px rgba(0, 0, 0, 0.25);
    left: calc(var(--size-4) * -1);
    width: 30%;
    height: 5rem;
    transition: top 0.3s ease-out;
  }
</style>
